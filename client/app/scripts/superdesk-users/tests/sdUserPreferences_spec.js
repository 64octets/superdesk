'use strict';

describe('sdUserPreferences directive', function() {
    var metadata,
        metadataInit,  // metadata initialization deferred object
        preferencesService,
        fetchedPreferences,
        prefFetch,
        scope,
        $element;  // the root DOM element the directive operates on

    beforeEach(module('superdesk.users'));
    beforeEach(module('superdesk.authoring.metadata'));
    beforeEach(module('superdesk.filters'));
    beforeEach(module('templates'));

    beforeEach(inject(function (
        $rootScope, $compile, $q, _metadata_, _preferencesService_, session
    ) {
        var html = '<div sd-user-preferences></div>';

        // patch session service
        session.identity = {
            dateline_source: 'AAP'
        };

        // mock preferencesService's fetched data
        fetchedPreferences = {
            'dateline:located': {
                label: 'Located',
                category: 'dateline',
                located: null
            },
            'categories:preferred': {
                selected: {}
            }
        };
        preferencesService = _preferencesService_;
        prefFetch = $q.defer();
        spyOn(preferencesService, 'get')
            .and.returnValue(prefFetch.promise);

        // patch metadata service's initialization
        metadata = _metadata_;
        metadataInit = $q.defer();

        spyOn(metadata, 'initialize')
            .and.returnValue(metadataInit.promise);

        // compile the directive and run it
        scope = $rootScope.$new();
        $element = $compile(html)(scope);
        scope.$digest();
    }));

    it('initializes the list of categories in scope', function () {
        metadata.values = {
            categories: [
                {name: 'Domestic Sport', qcode: 't'},
                {name: 'Politics', qcode: 'p'}
            ]
        };

        prefFetch.resolve(fetchedPreferences);
        metadataInit.resolve();
        scope.$digest();

        expect(angular.equals(
            scope.categories,
            [
                {name: 'Domestic Sport', qcode: 't', selected: false},
                {name: 'Politics', qcode: 'p', selected: false}
            ]
        )).toBe(true);
    });

    describe('scope\'s save() method', function () {
        var updatePrefs;

        beforeEach(inject(function ($q) {
            var $newDiv;

            // some code part expects a textbox to be present (normally
            // generated by a sub-directive), thus we need to provide it
            $newDiv = $('<div class="input-term"><input type="text"/></div>');
            $element.find('[sd-typeahead]').append($newDiv);

            updatePrefs = $q.defer();
            spyOn(preferencesService, 'update')
                .and.returnValue(updatePrefs.promise);
        }));

        it('sends the preferred categories settings to server', function () {
            var arg,
                callArgs;

            prefFetch.resolve(fetchedPreferences);
            scope.$digest();

            scope.categories = [
                {name: 'Advisories', qcode: 'v', selected: false},
                {name: 'Stockset', qcode: 'q', selected: true}
            ];

            scope.save();

            callArgs = preferencesService.update.calls.allArgs();
            expect(callArgs.length).toEqual(1);
            callArgs = callArgs[0][0] || {};  // first arg of the first call

            arg = callArgs['categories:preferred'] || {};
            expect(arg.selected).toEqual({'v': false, 'q': true});
        });
    });

});
